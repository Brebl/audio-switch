
input-line-selector.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	94 c0       	rjmp	.+296    	; 0x144 <__vector_13>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	2b c0       	rjmp	.+86     	; 0x80 <__vector_20>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e0       	ldi	r30, 0x0E	; 14
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 36       	cpi	r26, 0x66	; 102
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	aa d0       	rcall	.+340    	; 0x1ae <main>
  5a:	d7 c0       	rjmp	.+430    	; 0x20a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <init_interrupts>:
const uint8_t led_max_count = 2;


void init_interrupts()
{
    GIMSK |= (1 << PCIE2);
  5e:	8b b7       	in	r24, 0x3b	; 59
  60:	80 61       	ori	r24, 0x10	; 16
  62:	8b bf       	out	0x3b, r24	; 59
    PCMSK2 |= (1 << PCINT16);
  64:	2d 9a       	sbi	0x05, 5	; 5
    TCCR0A |= (1 << WGM01);                 //ctc
  66:	80 b7       	in	r24, 0x30	; 48
  68:	82 60       	ori	r24, 0x02	; 2
  6a:	80 bf       	out	0x30, r24	; 48
    TCCR0B |= (1 << CS00) | (1 << CS02);    //1024 prescaler
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	85 60       	ori	r24, 0x05	; 5
  70:	83 bf       	out	0x33, r24	; 51
    TIMSK |= (1 << OCIE0A);                 //ocr-a
  72:	89 b7       	in	r24, 0x39	; 57
  74:	81 60       	ori	r24, 0x01	; 1
  76:	89 bf       	out	0x39, r24	; 57
    OCR0A = 0xf4;                           //~4Hz
  78:	84 ef       	ldi	r24, 0xF4	; 244
  7a:	86 bf       	out	0x36, r24	; 54
    sei();
  7c:	78 94       	sei
  7e:	08 95       	ret

00000080 <__vector_20>:
}

//push button logic
ISR(PCINT2_vect) {  
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	2f 93       	push	r18
  8c:	3f 93       	push	r19
  8e:	4f 93       	push	r20
  90:	5f 93       	push	r21
  92:	6f 93       	push	r22
  94:	7f 93       	push	r23
  96:	8f 93       	push	r24
  98:	9f 93       	push	r25
  9a:	af 93       	push	r26
  9c:	bf 93       	push	r27
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	1f 92       	push	r1
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	dd 27       	eor	r29, r29
    uint8_t buttonpins = debounce(PUSH_BUTTON_PORT);
  ac:	80 b3       	in	r24, 0x10	; 16
  ae:	90 d0       	rcall	.+288    	; 0x1d0 <debounce>
  b0:	89 83       	std	Y+1, r24	; 0x01
    if(bit_is_clear(buttonpins, PUSH_BUTTON)){
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	85 fd       	sbrc	r24, 5
  b6:	32 c0       	rjmp	.+100    	; 0x11c <__stack+0x3d>
        if(LED_PORT != 0) {
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	88 23       	and	r24, r24
  bc:	29 f0       	breq	.+10     	; 0xc8 <__vector_20+0x48>
            led_counter++;
  be:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  c2:	8f 5f       	subi	r24, 0xFF	; 255
  c4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
        }
        if(led_counter > led_max_count) {
  c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	10 f0       	brcs	.+4      	; 0xd4 <__vector_20+0x54>
            led_counter = 0;
  d0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
        }
        timeout_counter = 0;
  d4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timeout_counter>
        switch (led_counter) {
  d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	69 f0       	breq	.+26     	; 0xfa <__stack+0x1b>
  e0:	38 f0       	brcs	.+14     	; 0xf0 <__stack+0x11>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	71 f4       	brne	.+28     	; 0x102 <__stack+0x23>
            transistors_off();
            LED_PORT |= (1 << LED1);
            TRANSISTOR_PORT |= (1 << TRAN1);
            break;
        case 2:
            leds_off();
  e6:	5b d0       	rcall	.+182    	; 0x19e <leds_off>
            transistors_off();
  e8:	5e d0       	rcall	.+188    	; 0x1a6 <transistors_off>
            LED_PORT |= (1 << LED2);
  ea:	c2 9a       	sbi	0x18, 2	; 24
            TRANSISTOR_PORT |= (1 << TRAN2);
  ec:	92 9a       	sbi	0x12, 2	; 18
  ee:	09 c0       	rjmp	.+18     	; 0x102 <__stack+0x23>
            led_counter = 0;
        }
        timeout_counter = 0;
        switch (led_counter) {
        case 0:
            leds_off();
  f0:	56 d0       	rcall	.+172    	; 0x19e <leds_off>
            transistors_off();
  f2:	59 d0       	rcall	.+178    	; 0x1a6 <transistors_off>
            LED_PORT |= (1 << LED0);
  f4:	c0 9a       	sbi	0x18, 0	; 24
            TRANSISTOR_PORT |= (1 << TRAN0);
  f6:	90 9a       	sbi	0x12, 0	; 18
            break;
  f8:	04 c0       	rjmp	.+8      	; 0x102 <__stack+0x23>
        case 1:
            leds_off();
  fa:	51 d0       	rcall	.+162    	; 0x19e <leds_off>
            transistors_off();
  fc:	54 d0       	rcall	.+168    	; 0x1a6 <transistors_off>
            LED_PORT |= (1 << LED1);
  fe:	c1 9a       	sbi	0x18, 1	; 24
            TRANSISTOR_PORT |= (1 << TRAN1);
 100:	91 9a       	sbi	0x12, 1	; 18
            LED_PORT |= (1 << LED2);
            TRANSISTOR_PORT |= (1 << TRAN2);
        default:
            break;
        }
        while(bit_is_clear(buttonpins,PUSH_BUTTON)) {
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	85 fd       	sbrc	r24, 5
 106:	0a c0       	rjmp	.+20     	; 0x11c <__stack+0x3d>
            buttonpins = debounce(PUSH_BUTTON_PORT);
 108:	80 b3       	in	r24, 0x10	; 16
 10a:	62 d0       	rcall	.+196    	; 0x1d0 <debounce>
 10c:	89 83       	std	Y+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	81 ee       	ldi	r24, 0xE1	; 225
 110:	94 e0       	ldi	r25, 0x04	; 4
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <__stack+0x33>
 116:	00 c0       	rjmp	.+0      	; 0x118 <__stack+0x39>
 118:	00 00       	nop
 11a:	f3 cf       	rjmp	.-26     	; 0x102 <__stack+0x23>
            _delay_ms(5);
        }        
    }  
}
 11c:	0f 90       	pop	r0
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	7f 91       	pop	r23
 130:	6f 91       	pop	r22
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <__vector_13>:

//turn leds off after timeout_max
ISR(TIMER0_COMPA_vect)  
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
    timeout_counter++;
 166:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <timeout_counter>
 16a:	8f 5f       	subi	r24, 0xFF	; 255
    if(timeout_counter >= timeout_max) {
 16c:	88 32       	cpi	r24, 0x28	; 40
 16e:	18 f4       	brcc	.+6      	; 0x176 <__vector_13+0x32>
}

//turn leds off after timeout_max
ISR(TIMER0_COMPA_vect)  
{
    timeout_counter++;
 170:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <timeout_counter>
 174:	03 c0       	rjmp	.+6      	; 0x17c <__vector_13+0x38>
    if(timeout_counter >= timeout_max) {
        timeout_counter = 0;
 176:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timeout_counter>
        leds_off();
 17a:	11 d0       	rcall	.+34     	; 0x19e <leds_off>
    }
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <leds_off>:
uint8_t debounce(uint8_t sample);
void init_interrupts();

inline void leds_off()
{
    LED_PORT &= ~((1 << LED0) | (1 << LED1) | (1 << LED2) | (1 << LED3) | (1 << LED4));
 19e:	88 b3       	in	r24, 0x18	; 24
 1a0:	80 7e       	andi	r24, 0xE0	; 224
 1a2:	88 bb       	out	0x18, r24	; 24
 1a4:	08 95       	ret

000001a6 <transistors_off>:
}
inline void transistors_off()
{
    TRANSISTOR_PORT &= ~((1 << TRAN0) | (1 << TRAN1) | (1 << TRAN2) | (1 << TRAN3) | (1 << TRAN4));
 1a6:	82 b3       	in	r24, 0x12	; 18
 1a8:	80 7e       	andi	r24, 0xE0	; 224
 1aa:	82 bb       	out	0x12, r24	; 18
 1ac:	08 95       	ret

000001ae <main>:
#include "main.h" 

int main(void)
{    
    DDRB = (1 << LED0) | (1 << LED1) | (1 << LED2);
 1ae:	87 e0       	ldi	r24, 0x07	; 7
 1b0:	87 bb       	out	0x17, r24	; 23
    DDRD = (1 << TRAN0) | (1 << TRAN1);
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	81 bb       	out	0x11, r24	; 17
    PORTD = (1 << PUSH_BUTTON);
 1b6:	80 e2       	ldi	r24, 0x20	; 32
 1b8:	82 bb       	out	0x12, r24	; 18
    
    init_interrupts();
 1ba:	51 df       	rcall	.-350    	; 0x5e <init_interrupts>
    set_sleep_mode(SLEEP_MODE_IDLE);
 1bc:	85 b7       	in	r24, 0x35	; 53
 1be:	8f 7a       	andi	r24, 0xAF	; 175
 1c0:	85 bf       	out	0x35, r24	; 53

    while (1) {     
        sleep_mode();
 1c2:	85 b7       	in	r24, 0x35	; 53
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	85 bf       	out	0x35, r24	; 53
 1c8:	88 95       	sleep
 1ca:	85 b7       	in	r24, 0x35	; 53
 1cc:	8f 7d       	andi	r24, 0xDF	; 223
 1ce:	f8 cf       	rjmp	.-16     	; 0x1c0 <main+0x12>

000001d0 <debounce>:
{
    static uint8_t state = 0xff;
    static uint8_t cnt0, cnt1;
    uint8_t delta;

    delta = sample ^ state;
 1d0:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__data_start>
 1d4:	54 2f       	mov	r21, r20
 1d6:	58 27       	eor	r21, r24
    cnt1 = (cnt1 ^ cnt0) & (delta & sample);
 1d8:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <cnt0.2130>
 1dc:	28 2f       	mov	r18, r24
 1de:	25 23       	and	r18, r21
 1e0:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <cnt1.2131>
 1e4:	96 2f       	mov	r25, r22
 1e6:	93 27       	eor	r25, r19
 1e8:	39 2f       	mov	r19, r25
 1ea:	32 23       	and	r19, r18
 1ec:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <cnt1.2131>
    cnt0 = ~cnt0 & (delta & sample);
 1f0:	96 2f       	mov	r25, r22
 1f2:	90 95       	com	r25
 1f4:	92 23       	and	r25, r18
 1f6:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <cnt0.2130>
    state ^= (delta & ~(cnt0 | cnt1));
 1fa:	93 2b       	or	r25, r19
 1fc:	90 95       	com	r25
 1fe:	95 23       	and	r25, r21
 200:	89 2f       	mov	r24, r25
 202:	84 27       	eor	r24, r20
 204:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    return state;
 208:	08 95       	ret

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
